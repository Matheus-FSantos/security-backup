package org.bitbucket.MatheusFSantos.hrworker.model.service;

import org.bitbucket.MatheusFSantos.hrworker.model.DAO.WorkerReposity;
import org.bitbucket.MatheusFSantos.hrworker.model.domain.Worker;
import org.bitbucket.MatheusFSantos.hrworker.model.exception.domain.WorkerExceptions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
public class WorkerService {

	@Autowired
	private WorkerReposity workerReposity;
	
	public List<Worker> findAll() {
		return this.workerReposity.findAll();
	}
	
	public Optional<Worker> findById(UUID id) {
		return this.workerReposity.findById(id);
	}
	
	public List<Worker> findByName(String name) {
		return this.workerReposity.findByName(name);
	}
	
	public List<Worker> findByNameContains(String name) {
		return this.workerReposity.findByNameContains(name);
	}
	
	public Worker save(Worker worker) {
		worker.updateCreatedAt();
		worker.updateUpdatedAt();
		
		return this.workerReposity.save(worker);
	}
	
	public void update(UUID id, Worker updatedWorker) throws WorkerExceptions {
		Optional<Worker> oldWorker = this.findById(id);
		
		if(oldWorker.isPresent()) {
			this.modify(oldWorker.get(), updatedWorker);
			this.workerReposity.save(updatedWorker);
		} else
			throw new WorkerExceptions("Worker not found!");
	}
	
	public void delete(UUID id) throws WorkerExceptions {
		if(this.findById(id).isEmpty())
			throw new WorkerExceptions("Worker not found!");
		else
			this.workerReposity.deleteById(id);
	}
	
	private void modify(Worker oldWorker, Worker updatedWorker) {
		updatedWorker.updateId(oldWorker.getId());
		updatedWorker.updateCreatedAt(oldWorker.getCreatedAt());
		updatedWorker.updateUpdatedAt();
	}
	
}
