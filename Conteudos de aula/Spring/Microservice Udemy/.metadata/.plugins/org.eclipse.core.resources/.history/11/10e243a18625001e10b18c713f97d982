package org.bitbucket.MatheusFSantos.hrworker.model.validation;

import java.util.ArrayList;

import org.bitbucket.MatheusFSantos.hrworker.model.domain.Worker;
import org.bitbucket.MatheusFSantos.hrworker.model.exception.domain.WorkerExceptions;

import java.util.List;
import java.util.UUID;
import java.util.regex.Pattern;

public class WorkerValidation {
	
	public static void validationWithoutId(Worker worker) throws WorkerExceptions {
		List<String> messages = new ArrayList<>();
		
		if(worker == null)
			messages.add("Worker is required!");
		else {
			nameValidation(messages, worker.getName());
			dailyIncomeValidation(messages, worker.getDailyIncome());
		}
		
		if(!messages.isEmpty())
			throw new WorkerExceptions(messages);
	}
	
	private static void nameValidation(List<String> messages, String name) {
		if(name == null)
			messages.add("Worker name is required!");
		else if(name.length() < 4 || name.length() > 60)
			messages.add("Invalid fields!");
	}
	
	private static void dailyIncomeValidation(List<String> messages, Double dailyIncome) {
		if(dailyIncome == null)
			messages.add("Worker daily income is required!");
		else if(dailyIncome <= 0)
			messages.add("Invalid fields!");
	}
	
	private static void uuidValidation(List<String> messages, UUID id) {
		if(id == null)
			messages.add("Worker id is required!");
		else {
			Pattern UUID_REGEX = Pattern.compile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$");
			if (!UUID_REGEX.matcher(id.toString()).matches())
				messages.add("Worker id is invalid")
		}
	}

}
